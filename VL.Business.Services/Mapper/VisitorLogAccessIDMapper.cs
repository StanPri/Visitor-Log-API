//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// 
//  Author: Johnny Vu
// </auto-generated>
//------------------------------------------------------------------------------

namespace VL.Business.Services.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Linq;
    using VL.Business.Entities;
    using VL.Data.Model;
    
    /// <summary>
    /// DTO Mapper for <see cref="VisitorLogAccessID"/> and <see cref="VisitorLogAccessIDEntity"/>.
    /// </summary>
    static public partial class VisitorLogAccessIDMapper
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="VisitorLogAccessIDEntity"/> converted from <see cref="VisitorLogAccessID"/>.</param>
        static partial void OnDTO(this VisitorLogAccessID entity, VisitorLogAccessIDEntity dto);
       
        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="VisitorLogAccessID"/> converted from <see cref="VisitorLogAccessIDEntity"/>.</param>
        static partial void OnEntity(this VisitorLogAccessIDEntity dto, VisitorLogAccessID entity);
    
    
        /// <summary>
        /// Converts this instance of <see cref="VisitorLogAccessIDEntity"/> to an instance of <see cref="VisitorLogAccessID"/>.
        /// </summary>
        /// <param name="dto"><see cref="VisitorLogAccessIDEntity"/> to convert.</param>
        public static VisitorLogAccessID ToEntity(this VisitorLogAccessIDEntity dto)
        {
            if (dto == null) return null;
    
            var entity = new VisitorLogAccessID();
                 
            entity.VisitID = dto.VisitID;     
            entity.AccessID = dto.AccessID;     
            entity.OtherAccess = dto.OtherAccess;        
            dto.OnEntity(entity);
    
            return entity;
        }
    
        /// <summary>
        /// Converts this instance of <see cref="VisitorLogAccessID"/> to an instance of <see cref="VisitorLogAccessIDEntity"/>.
        /// </summary>
        /// <param name="entity"><see cref="VisitorLogAccessID"/> to convert.</param>
        public static VisitorLogAccessIDEntity ToDTO(this VisitorLogAccessID entity)
        {
            if (entity == null) return null;
    
            var dto = new VisitorLogAccessIDEntity();
                 
            dto.VisitID = entity.VisitID;     
            dto.AccessID = entity.AccessID;     
            dto.OtherAccess = entity.OtherAccess;
            entity.OnDTO(dto);
    
            return dto;
        }
    
        /// <summary>
        /// Converts each instance of <see cref="VisitorLogAccessIDEntity"/> to an instance of <see cref="VisitorLogAccessID"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<VisitorLogAccessID> ToEntities(this IEnumerable<VisitorLogAccessIDEntity> dtos)
        {
            if (dtos == null) return null;
    
            return dtos.Select(e => e.ToEntity()).ToList();
        }
    
        /// <summary>
        /// Converts each instance of <see cref="VisitorLogAccessID"/> to an instance of <see cref="VisitorLogAccessIDEntity"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<VisitorLogAccessIDEntity> ToDTOs(this IEnumerable<VisitorLogAccessID> entities)
        {
            if (entities == null) return null;
    
            return entities.Select(e => e.ToDTO()).ToList();
        }
    
    }
}
