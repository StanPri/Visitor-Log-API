//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// 
//  Author: Johnny Vu
// </auto-generated>
//------------------------------------------------------------------------------

namespace VL.Business.Services.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Linq;
    using VL.Business.Entities;
    using VL.Data.Model;
    
    /// <summary>
    /// DTO Mapper for <see cref="VisitorCheckInOut"/> and <see cref="VisitorCheckInOutEntity"/>.
    /// </summary>
    static public partial class VisitorCheckInOutMapper
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="VisitorCheckInOutEntity"/> converted from <see cref="VisitorCheckInOut"/>.</param>
        static partial void OnDTO(this VisitorCheckInOut entity, VisitorCheckInOutEntity dto);
       
        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="VisitorCheckInOut"/> converted from <see cref="VisitorCheckInOutEntity"/>.</param>
        static partial void OnEntity(this VisitorCheckInOutEntity dto, VisitorCheckInOut entity);
    
    
        /// <summary>
        /// Converts this instance of <see cref="VisitorCheckInOutEntity"/> to an instance of <see cref="VisitorCheckInOut"/>.
        /// </summary>
        /// <param name="dto"><see cref="VisitorCheckInOutEntity"/> to convert.</param>
        public static VisitorCheckInOut ToEntity(this VisitorCheckInOutEntity dto)
        {
            if (dto == null) return null;
    
            var entity = new VisitorCheckInOut();
                 
            entity.VisitID = dto.VisitID;     
            entity.Visitor = dto.Visitor;     
            entity.VisitDate = dto.VisitDate;     
            entity.CheckInTime = dto.CheckInTime;     
            entity.CheckOutTime = dto.CheckOutTime;     
            entity.EquipmentInfo = dto.EquipmentInfo;     
            entity.BadgeNo = dto.BadgeNo;        
            dto.OnEntity(entity);
    
            return entity;
        }
    
        /// <summary>
        /// Converts this instance of <see cref="VisitorCheckInOut"/> to an instance of <see cref="VisitorCheckInOutEntity"/>.
        /// </summary>
        /// <param name="entity"><see cref="VisitorCheckInOut"/> to convert.</param>
        public static VisitorCheckInOutEntity ToDTO(this VisitorCheckInOut entity)
        {
            if (entity == null) return null;
    
            var dto = new VisitorCheckInOutEntity();
                 
            dto.VisitID = entity.VisitID;     
            dto.Visitor = entity.Visitor;     
            dto.VisitDate = entity.VisitDate;     
            dto.CheckInTime = entity.CheckInTime;     
            dto.CheckOutTime = entity.CheckOutTime;     
            dto.EquipmentInfo = entity.EquipmentInfo;     
            dto.BadgeNo = entity.BadgeNo;
            entity.OnDTO(dto);
    
            return dto;
        }
    
        /// <summary>
        /// Converts each instance of <see cref="VisitorCheckInOutEntity"/> to an instance of <see cref="VisitorCheckInOut"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<VisitorCheckInOut> ToEntities(this IEnumerable<VisitorCheckInOutEntity> dtos)
        {
            if (dtos == null) return null;
    
            return dtos.Select(e => e.ToEntity()).ToList();
        }
    
        /// <summary>
        /// Converts each instance of <see cref="VisitorCheckInOut"/> to an instance of <see cref="VisitorCheckInOutEntity"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<VisitorCheckInOutEntity> ToDTOs(this IEnumerable<VisitorCheckInOut> entities)
        {
            if (entities == null) return null;
    
            return entities.Select(e => e.ToDTO()).ToList();
        }
    
    }
}
