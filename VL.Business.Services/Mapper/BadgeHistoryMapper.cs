//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// 
//  Author: Johnny Vu
// </auto-generated>
//------------------------------------------------------------------------------

namespace VL.Business.Services.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Linq;
    using VL.Business.Entities;
    using VL.Data.Model;
    
    /// <summary>
    /// DTO Mapper for <see cref="BadgeHistory"/> and <see cref="BadgeHistoryDTO"/>.
    /// </summary>
    static public partial class BadgeHistoryMapper
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="BadgeHistoryDTO"/> converted from <see cref="BadgeHistory"/>.</param>
        static partial void OnDTO(this BadgeHistory entity, BadgeHistoryDTO dto);
       
        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="BadgeHistory"/> converted from <see cref="BadgeHistoryDTO"/>.</param>
        static partial void OnEntity(this BadgeHistoryDTO dto, BadgeHistory entity);
    
    
        /// <summary>
        /// Converts this instance of <see cref="BadgeHistoryDTO"/> to an instance of <see cref="BadgeHistory"/>.
        /// </summary>
        /// <param name="dto"><see cref="BadgeHistoryDTO"/> to convert.</param>
        public static BadgeHistory ToEntity(this BadgeHistoryDTO dto)
        {
            if (dto == null) return null;
    
            var entity = new BadgeHistory();
                 
            entity.ID = dto.ID;     
            entity.BadgeID = dto.BadgeID;     
            entity.Number = dto.Number;     
            entity.IsActive = dto.IsActive;     
            entity.ModifiedByUserID = dto.ModifiedByUserID;     
            entity.ModifiedDate = dto.ModifiedDate;     
            entity.AuditDate = dto.AuditDate;        
            dto.OnEntity(entity);
    
            return entity;
        }
    
        /// <summary>
        /// Converts this instance of <see cref="BadgeHistory"/> to an instance of <see cref="BadgeHistoryDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="BadgeHistory"/> to convert.</param>
        public static BadgeHistoryDTO ToDTO(this BadgeHistory entity)
        {
            if (entity == null) return null;
    
            var dto = new BadgeHistoryDTO();
                 
            dto.ID = entity.ID;     
            dto.BadgeID = entity.BadgeID;     
            dto.Number = entity.Number;     
            dto.IsActive = entity.IsActive;     
            dto.ModifiedByUserID = entity.ModifiedByUserID;     
            dto.ModifiedDate = entity.ModifiedDate;     
            dto.AuditDate = entity.AuditDate;
            entity.OnDTO(dto);
    
            return dto;
        }
    
        /// <summary>
        /// Converts each instance of <see cref="BadgeHistoryDTO"/> to an instance of <see cref="BadgeHistory"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<BadgeHistory> ToEntities(this IEnumerable<BadgeHistoryDTO> dtos)
        {
            if (dtos == null) return null;
    
            return dtos.Select(e => e.ToEntity()).ToList();
        }
    
        /// <summary>
        /// Converts each instance of <see cref="BadgeHistory"/> to an instance of <see cref="BadgeHistoryDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<BadgeHistoryDTO> ToDTOs(this IEnumerable<BadgeHistory> entities)
        {
            if (entities == null) return null;
    
            return entities.Select(e => e.ToDTO()).ToList();
        }
    
    }
}
