//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// 
//  Author: Henry Rodriguez
// </auto-generated>
//------------------------------------------------------------------------------

namespace VL.Business.Services.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Linq;
    using VL.Business.Entities;
    using VL.Data.Model;
    
    /// <summary>
    /// DTO Mapper for <see cref="CampusLocation"/> and <see cref="CampusLocationDTO"/>.
    /// </summary>
    static public partial class CampusLocationMapper
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="CampusLocationDTO"/> converted from <see cref="CampusLocation"/>.</param>
        static partial void OnDTO(this CampusLocation entity, CampusLocationDTO dto);
       
        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="CampusLocation"/> converted from <see cref="CampusLocationDTO"/>.</param>
        static partial void OnEntity(this CampusLocationDTO dto, CampusLocation entity);
    
    
        /// <summary>
        /// Converts this instance of <see cref="CampusLocationDTO"/> to an instance of <see cref="CampusLocation"/>.
        /// </summary>
        /// <param name="dto"><see cref="CampusLocationDTO"/> to convert.</param>
        public static CampusLocation ToEntity(this CampusLocationDTO dto)
        {
            if (dto == null) return null;
    
            var entity = new CampusLocation();
                 
            entity.CampusID = dto.CampusID;     
            entity.LocationID = dto.LocationID;     
            entity.CreatedByUserID = dto.CreatedByUserID;     
            entity.CreatedDate = dto.CreatedDate;     
            entity.ModifiedByUserID = dto.ModifiedByUserID;     
            entity.ModifiedDate = dto.ModifiedDate;        
            dto.OnEntity(entity);
    
            return entity;
        }
    
        /// <summary>
        /// Converts this instance of <see cref="CampusLocation"/> to an instance of <see cref="CampusLocationDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="CampusLocation"/> to convert.</param>
        public static CampusLocationDTO ToDTO(this CampusLocation entity)
        {
            if (entity == null) return null;
    
            var dto = new CampusLocationDTO();
                 
            dto.CampusID = entity.CampusID;     
            dto.LocationID = entity.LocationID;     
            dto.CreatedByUserID = entity.CreatedByUserID;     
            dto.CreatedDate = entity.CreatedDate;     
            dto.ModifiedByUserID = entity.ModifiedByUserID;     
            dto.ModifiedDate = entity.ModifiedDate;
            entity.OnDTO(dto);
    
            return dto;
        }
    
        /// <summary>
        /// Converts each instance of <see cref="CampusLocationDTO"/> to an instance of <see cref="CampusLocation"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<CampusLocation> ToEntities(this IEnumerable<CampusLocationDTO> dtos)
        {
            if (dtos == null) return null;
    
            return dtos.Select(e => e.ToEntity()).ToList();
        }
    
        /// <summary>
        /// Converts each instance of <see cref="CampusLocation"/> to an instance of <see cref="CampusLocationDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<CampusLocationDTO> ToDTOs(this IEnumerable<CampusLocation> entities)
        {
            if (entities == null) return null;
    
            return entities.Select(e => e.ToDTO()).ToList();
        }
    
    }
}
