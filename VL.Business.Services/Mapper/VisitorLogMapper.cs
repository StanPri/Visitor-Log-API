//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// 
//  Author: Johnny Vu
// </auto-generated>
//------------------------------------------------------------------------------

namespace VL.Business.Services.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Linq;
    using VL.Business.Entities;
    using VL.Data.Model;
    
    /// <summary>
    /// DTO Mapper for <see cref="VisitorLog"/> and <see cref="VisitorLogEntity"/>.
    /// </summary>
    static public partial class VisitorLogMapper
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="VisitorLogEntity"/> converted from <see cref="VisitorLog"/>.</param>
        static partial void OnDTO(this VisitorLog entity, VisitorLogEntity dto);
       
        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="VisitorLog"/> converted from <see cref="VisitorLogEntity"/>.</param>
        static partial void OnEntity(this VisitorLogEntity dto, VisitorLog entity);
    
    
        /// <summary>
        /// Converts this instance of <see cref="VisitorLogEntity"/> to an instance of <see cref="VisitorLog"/>.
        /// </summary>
        /// <param name="dto"><see cref="VisitorLogEntity"/> to convert.</param>
        public static VisitorLog ToEntity(this VisitorLogEntity dto)
        {
            if (dto == null) return null;
    
            var entity = new VisitorLog();
                 
            entity.VisitID = dto.VisitID;     
            entity.VisitorLogNo = dto.VisitorLogNo;     
            entity.FY = dto.FY;     
            entity.StatusId = dto.StatusId;     
            entity.Amendment = dto.Amendment;     
            entity.AmendDateTime = dto.AmendDateTime;     
            entity.StartDateTime = dto.StartDateTime;     
            entity.EndDate = dto.EndDate;     
            entity.OnGoing = dto.OnGoing;     
            entity.Company = dto.Company;     
            entity.CampusID = dto.CampusID;     
            entity.OtherRoomInfo = dto.OtherRoomInfo;     
            entity.OtherAccessAreaInfo = dto.OtherAccessAreaInfo;     
            entity.PrimaryContactId = dto.PrimaryContactId;     
            entity.SecondaryContactId = dto.SecondaryContactId;     
            entity.Reason = dto.Reason;     
            entity.SpecialInstruction = dto.SpecialInstruction;     
            entity.SubmittedById = dto.SubmittedById;     
            entity.DistributedById = dto.DistributedById;     
            entity.CreatedById = dto.CreatedById;     
            entity.CreatedDate = dto.CreatedDate;     
            entity.ModifiedById = dto.ModifiedById;     
            entity.ModifiedDate = dto.ModifiedDate;     
            entity.Testing = dto.Testing;        
            dto.OnEntity(entity);
    
            return entity;
        }
    
        /// <summary>
        /// Converts this instance of <see cref="VisitorLog"/> to an instance of <see cref="VisitorLogEntity"/>.
        /// </summary>
        /// <param name="entity"><see cref="VisitorLog"/> to convert.</param>
        public static VisitorLogEntity ToDTO(this VisitorLog entity)
        {
            if (entity == null) return null;
    
            var dto = new VisitorLogEntity();
                 
            dto.VisitID = entity.VisitID;     
            dto.VisitorLogNo = entity.VisitorLogNo;     
            dto.FY = entity.FY;     
            dto.StatusId = entity.StatusId;     
            dto.Amendment = entity.Amendment;     
            dto.AmendDateTime = entity.AmendDateTime;     
            dto.StartDateTime = entity.StartDateTime;     
            dto.EndDate = entity.EndDate;     
            dto.OnGoing = entity.OnGoing;     
            dto.Company = entity.Company;     
            dto.CampusID = entity.CampusID;     
            dto.OtherRoomInfo = entity.OtherRoomInfo;     
            dto.OtherAccessAreaInfo = entity.OtherAccessAreaInfo;     
            dto.PrimaryContactId = entity.PrimaryContactId;     
            dto.SecondaryContactId = entity.SecondaryContactId;     
            dto.Reason = entity.Reason;     
            dto.SpecialInstruction = entity.SpecialInstruction;     
            dto.SubmittedById = entity.SubmittedById;     
            dto.DistributedById = entity.DistributedById;     
            dto.CreatedById = entity.CreatedById;     
            dto.CreatedDate = entity.CreatedDate;     
            dto.ModifiedById = entity.ModifiedById;     
            dto.ModifiedDate = entity.ModifiedDate;     
            dto.Testing = entity.Testing;
            entity.OnDTO(dto);
    
            return dto;
        }
    
        /// <summary>
        /// Converts each instance of <see cref="VisitorLogEntity"/> to an instance of <see cref="VisitorLog"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<VisitorLog> ToEntities(this IEnumerable<VisitorLogEntity> dtos)
        {
            if (dtos == null) return null;
    
            return dtos.Select(e => e.ToEntity()).ToList();
        }
    
        /// <summary>
        /// Converts each instance of <see cref="VisitorLog"/> to an instance of <see cref="VisitorLogEntity"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<VisitorLogEntity> ToDTOs(this IEnumerable<VisitorLog> entities)
        {
            if (entities == null) return null;
    
            return entities.Select(e => e.ToDTO()).ToList();
        }
    
    }
}
